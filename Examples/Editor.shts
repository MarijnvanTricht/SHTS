<!-- SHTS example created by Marijn van Tricht -->
<!-- github functions untested -->
<html lang="en" style="--scrollbar-bg:#FFF; --scrollbar-thumb:#CCC;"><head>
<!-- EDITOR.shts -->
<script>
/* for the demo */
const defaultExportName = "Editor.shts"
</script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor</title>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400&amp;display=swap" rel="stylesheet">
    <style>
		/* Custom scrollbar styles */
		:root {
			--scrollbar-bg: #FFF;
			--scrollbar-thumb: #CCC;
		}
		::-webkit-scrollbar {
			width: 12px;
			height: 12px;
		}
		::-webkit-scrollbar-track {
			background: var(--scrollbar-bg);
		}
		::-webkit-scrollbar-thumb {
			background-color: var(--scrollbar-thumb);
			border-radius: 10px;
			border: 3px solid var(--scrollbar-bg);
		}
		::-webkit-scrollbar-thumb:hover {
			background-color: #888;
		}
        body {
            background-color: #272822;
            color: #ddd;
			scrollbar-width: thin;
			scrollbar-color: var(--scrollbar-thumb) var(--scrollbar-bg);
			font-family: 'Open Sans', sans-serif;
			font-size:14px;
        }
        #statusbar {
            height: 10px;
            width: 100vh;
        }
        #status {
            display: inline;
            height: 10px;
        }
        #editor {
            width: 100%;
            height: calc(100vh - 70px);
            border: 0px solid #ccc;
        }
        #storedData, #themeTag, #post {
            display: none;
        }
        #topmenu {
            margin-bottom: 5px;
            white-space: nowrap;
            display: flex;
            align-items: center; /* Align items in the center vertically */
        }
        #topmenu button {
            margin-right: 2px;
            padding: 2px 3px;
            background-color: #444; /* Darker background color */
            border: 1px solid #444; /* Border color matching the theme */
            color: white; /* White text color */
            border-radius: 1px; /* Rounded corners */
            cursor: pointer; /* Pointer cursor on hover */
            font-size: 12px; /* Font size adjustment */
            display: flex;
            align-items: center; /* Center items within the button */
        }
        /* Additional hover effect for buttons */
        #topmenu button:hover {
            background-color: #555; /* Slightly lighter background on hover */
            border-color: #888; /* Slightly lighter border on hover */
        }
        #topmenu input {
			flex-grow: 1;
            margin: 0 2px;
        }
        input[type="text"] {
            padding: 1px;
            border: 1px solid #D3D3D3;
            border-radius: 1px;
            box-shadow: none;
            background-color: #D3D3D3;
            color: #272822;
            outline: none;
			height:22px;
        }
        input[type="text"]:focus {
            border-color: #D3D3D3;
        }
        #saveAs, #saveFile, #newFile, #toggleTheme {
            padding: 0px;
            margin-top: 0px;
        }
        
        #topmenu button {
            height:22px;
            overflow:hidden;
        }
        
        #topmenu button svg {
            width: 18px;
            height: 20px;
        }
    </style>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/theme-monokai.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/mode-javascript.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/theme-chrome.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/mode-html.js"></script></head>
<body style="background-color: rgb(221, 221, 221); color: rgb(39, 40, 34);">
    <div id="topmenu">
        <button id="fetch" style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);">Fetch</button>
        <button id="commit" style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);">Commit</button>
        <input type="text" style="width:20px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);" id="githubToken" value="" placeholder="GitHub Token">
        <input type="text" style="width:20px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);" id="repoOwner" value="" placeholder="Repo Owner">
        <input type="text" style="width:20px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);" id="repoName" value="" placeholder="Repo Name">
        <input type="text" style="width:20px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);" id="filePath" value="" placeholder="File Path">
        <input type="text" style="width:20px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);" id="branch" value="" placeholder="Branch">
        <!-- "Save Icon" by Mahesh Keshvala from Noun Project, licensed under CC BY 3.0. -->
        <!-- https://creativecommons.org/licenses/by/3.0/ -->
        <!-- Source: https://thenounproject.com/icon/save-2209758/ -->
        <!-- changes to the original icon are dynamically made switching to dark-mode.  -->
        <button id="saveAs" style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 400 500" style="enable-background:new 0 0 400 400;" xml:space="preserve"><g><path d="M358.8,272.2v70.3c0,1.4-0.2,2.7-0.5,3.9v0c0,0,0,0,0,0c-1.4,6.9-7.5,12.1-14.7,12.1H56.3c-7.7,0-14.1-5.9-14.9-13.4   c-0.2-0.9-0.2-1.7-0.2-2.7v-70.3c0-8.3,6.8-15,15-15c4.1,0,7.9,1.7,10.6,4.4c2.7,2.7,4.4,6.5,4.4,10.6v56.3h257.7v-56.3   c0-8.3,6.8-15,15-15c4.1,0,7.9,1.7,10.6,4.4C357.1,264.3,358.8,268.1,358.8,272.2z" fill="#000"></path><path d="M286.5,201.8l-73.7,73.7c-0.1,0.2-0.3,0.3-0.4,0.4c-2.7,2.7-6.2,4.4-9.7,4.9c-0.3,0-0.6,0.1-0.9,0.1   c-0.6,0.1-1.2,0.1-1.8,0.1h0l-1.7-0.1c-0.3,0-0.6-0.1-0.9-0.1c-3.6-0.5-7-2.2-9.7-4.9c-0.1-0.1-0.3-0.3-0.4-0.4l-73.7-73.7   c-3.4-3.4-5.1-7.9-5.1-12.4c0-4.5,1.7-9,5.1-12.4c6.8-6.8,17.9-6.8,24.8,0l44.3,44.3V59c0-9.6,7.9-17.5,17.5-17.5   c4.8,0,9.2,2,12.4,5.1c3.2,3.2,5.1,7.5,5.1,12.4v162.3l44.3-44.3c6.8-6.8,17.9-6.8,24.8,0C293.3,183.9,293.3,195,286.5,201.8z" fill="#000"></path></g><text x="0" y="415" fill="#000" font-size="5px" font-weight="bold" font-family="'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif">Created by Mahesh Keshvala</text><text x="0" y="420" fill="#000" font-size="5px" font-weight="bold" font-family="'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif">from the Noun Project</text></svg>
		</button>
		<!-- "Save File Icon" by Kosong Tujuh from Noun Project, licensed under CC BY 3.0. -->
        <!-- https://creativecommons.org/licenses/by/3.0/ -->
        <!-- Source: https://thenounproject.com/icon/save-6980338/ -->
        <!-- remove text element on the left corner  -->
        <!-- changes to the original icon are dynamically made switching to dark-mode.  -->
		<button id="saveFile" style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="-5.0 -10.0 110.0 135.0"><g><path d="m32.609 51.621c-1.1406 0-2.0703 0.92969-2.0703 2.0703v36.309h38.922v-36.309c0-1.1406-0.92969-2.0703-2.0703-2.0703z" fill="#000"></path><path d="m30.539 10v15.602c0 1.1406 0.92969 2.0703 2.0703 2.0703h34.781c1.1406 0 2.0703-0.92969 2.0703-2.0703v-15.602h-5.0703v8.8398c0 0.89844-0.73047 1.6211-1.6211 1.6211s-1.6211-0.73047-1.6211-1.6211v-8.8398z" fill="#000"></path><path d="m82.281 90c3.7188 0 6.7383-3.0195 6.7383-6.7383v-59.082c0-0.58984-0.23047-1.1406-0.64844-1.5586l-11.98-11.98c-0.42188-0.42188-0.96875-0.64844-1.5586-0.64844h-2.1289v15.602c0 2.9297-2.3789 5.3203-5.3203 5.3203h-34.781c-2.9297 0-5.3203-2.3789-5.3203-5.3203v-15.602h-9.5703c-3.7188 0-6.7383 3.0195-6.7383 6.7383v66.52c0 3.7188 3.0195 6.7383 6.7383 6.7383h9.5703v-36.309c0-2.9297 2.3789-5.3203 5.3203-5.3203h34.781c2.9297 0 5.3203 2.3789 5.3203 5.3203v36.309h9.5703z" fill="#000"></path></g></svg>
        </button>
		<!-- "New File Icon" by wiran toni from Noun Project, licensed under CC BY 3.0. -->
        <!-- https://creativecommons.org/licenses/by/3.0/ -->
        <!-- Source: https://thenounproject.com/icon/new-file-6801117/ -->
        <!-- remove text element on the left corner  -->
        <!-- changes to the original icon are dynamically made switching to dark-mode.  -->
		<button id="newFile" style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204);">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="-5.0 -10.0 110.0 135.0"><g><path d="m22.656 28.008v32.914c0 1.5547 1.2578 2.8125 2.8125 2.8125s2.8125-1.2578 2.8125-2.8125v-32.914c0-3.5547 2.8945-6.4453 6.4453-6.4453h23.199v10.816c0 5.082 4.1328 9.2148 9.2188 9.2148h10.262v30.395c0 3.5547-2.8945 6.4453-6.4453 6.4453h-32.508c-1.5547 0-2.8125 1.2578-2.8125 2.8125 0 1.5547 1.2578 2.8125 2.8125 2.8125h32.508c6.6562 0 12.07-5.4141 12.07-12.074v-33.199c0-0.11719-0.054688-0.21875-0.066406-0.33203-0.027344-0.24219-0.054688-0.49219-0.14844-0.72266-0.097656-0.23438-0.25391-0.42969-0.40625-0.62891-0.070312-0.085937-0.10156-0.19531-0.17969-0.27734l-19.48-20.035c-0.003906-0.003906-0.007812-0.007812-0.015625-0.007812-0.24219-0.24609-0.53516-0.44531-0.85547-0.58594-0.35938-0.16406-0.74219-0.25-1.1328-0.25391-0.007813 0-0.007813-0.003906-0.011719-0.003906h-26.012c-6.6523 0-12.066 5.4141-12.066 12.07zm40.895 4.3711v-6.7031l10.012 10.297h-6.418c-1.9805 0-3.5938-1.6133-3.5938-3.5938z" fill="#000"></path><path d="m22.656 72.746h-2.875c-1.5547 0-2.8125 1.2578-2.8125 2.8125 0 1.5547 1.2578 2.8125 2.8125 2.8125h2.875v2.8789c0 1.5547 1.2578 2.8125 2.8125 2.8125s2.8125-1.2578 2.8125-2.8125v-2.875h2.875c1.5547 0 2.8125-1.2578 2.8125-2.8125s-1.2578-2.8125-2.8125-2.8125h-2.875v-2.875c0-1.5547-1.2578-2.8125-2.8125-2.8125s-2.8125 1.2578-2.8125 2.8125z" fill="#000"></path></g></svg>
        </button>
		<!-- "Toggle Theme Icon" by Jessiey from Noun Project, licensed under CC BY 3.0. -->
        <!-- https://creativecommons.org/licenses/by/3.0/ -->
        <!-- Source: https://thenounproject.com/icon/theme-6000228/ -->
        <!-- remove text element on the left corner  -->
        <!-- changes to the original icon are dynamically made switching to dark-mode.  -->
		<button id="toggleTheme" style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); border: 1px solid rgb(204, 204, 204); margin-right:0px;">
            <svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="-1.6 -3.2 35.2 43.2" x="0px" y="0px"><path d="m14.29,7.81c-.39-.39-1.02-.39-1.41,0l-4.95,4.95c-.78.78-.78,2.05,0,2.83l2.12,2.12-4.24,4.24c-1.17,1.17-1.17,3.07,0,4.24.57.57,1.32.88,2.12.88s1.55-.31,2.12-.88l4.24-4.24,2.12,2.12c.78.78,2.05.78,2.83,0l4.95-4.95c.19-.19.29-.44.29-.71s-.11-.52-.29-.71L14.29,7.81Zm3.54,14.85l-2.83-2.83c-.39-.39-1.02-.39-1.41,0l-4.95,4.95c-.38.38-1.04.38-1.41,0-.39-.39-.39-1.02,0-1.41l4.95-4.95c.19-.19.29-.44.29-.71s-.11-.52-.29-.71l-2.83-2.83h0s4.24-4.24,4.24-4.24l8.49,8.49-4.24,4.24Z" fill="#000"></path><path d="m12.82,13.4c-.39.39-.39,1.02,0,1.41l4.32,4.32c.2.2.45.29.71.29s.51-.1.71-.29c.39-.39.39-1.02,0-1.41l-4.32-4.32c-.39-.39-1.02-.39-1.41,0Z" fill="#000"></path><path d="m28.43,12.05l-4.24-4.24s0,0,0,0,0,0,0,0l-2.12-2.12s0,0,0,0,0,0,0,0l-2.12-2.12c-.38-.38-.88-.59-1.41-.59h0c-.53,0-1.04.21-1.41.59l-2.12,2.12c-.39.39-.39,1.02,0,1.41.39.39,1.02.39,1.41,0l2.12-2.12,1.41,1.41-1.43,1.43c-.39.39-.39,1.02,0,1.41.2.2.45.29.71.29s.51-.1.71-.29l1.43-1.43.71.71-1.43,1.43c-.39.39-.39,1.02,0,1.41.2.2.45.29.71.29s.51-.1.71-.29l1.43-1.43.71.71-1.43,1.43c-.39.39-.39,1.02,0,1.41.2.2.45.29.71.29s.51-.1.71-.29l1.43-1.43,1.41,1.41-2.12,2.12c-.39.39-.39,1.02,0,1.41.2.2.45.29.71.29s.51-.1.71-.29l2.12-2.12c.38-.38.59-.88.59-1.41s-.21-1.04-.59-1.41Z" fill="#000"></path></svg>
        </button>
    </div>
    <div style="height:5px;display:block;"></div>
    <div id="editor" ondrop="handleDrop(event)" ondragover="allowDrop(event)" class=" ace_editor ace_hidpi ace-chrome" draggable="false"></div>
    <div style="height:5px;display:block;"></div>
    <div id="statusbar">Status:&nbsp;<div id="status"></div></div>
    <div id="storedData"></div>
	<div id="themeTag">light</div>
	<div id="post"></div>
    <script>
        const editor = ace.edit("editor");
        editor.setTheme("ace/theme/monokai");
        editor.session.setMode("ace/mode/javascript");
        const getGithubConfig = () => {
            return {
                githubToken: document.getElementById('githubToken').value,
                repoOwner: document.getElementById('repoOwner').value,
                repoName: document.getElementById('repoName').value,
                filePath: document.getElementById('filePath').value,
                branch: document.getElementById('branch').value
            };
        };
        const saveInputValues = () => {
            document.getElementById('githubToken').setAttribute('value', document.getElementById('githubToken').value);
            document.getElementById('repoOwner').setAttribute('value', document.getElementById('repoOwner').value);
            document.getElementById('repoName').setAttribute('value', document.getElementById('repoName').value);
            document.getElementById('filePath').setAttribute('value', document.getElementById('filePath').value);
            document.getElementById('branch').setAttribute('value', document.getElementById('branch').value);
        };
        document.getElementById('githubToken').addEventListener('input', saveInputValues);
        document.getElementById('repoOwner').addEventListener('input', saveInputValues);
        document.getElementById('repoName').addEventListener('input', saveInputValues);
        document.getElementById('filePath').addEventListener('input', saveInputValues);
        document.getElementById('branch').addEventListener('input', saveInputValues);
        editor.session.on('change', () => {
            document.getElementById('storedData').textContent = editor.getValue();
        });
        document.getElementById('fetch').addEventListener('click', async () => {
            const { githubToken, repoOwner, repoName, filePath } = getGithubConfig();
            try {
                const response = await axios.get(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`, {
                    headers: { Authorization: `token ${githubToken}` }
                });
                const fileContent = atob(response.data.content);
                editor.setValue(fileContent);
                
                const detectedLanguage = autoDetectLanguage(fileContent);
                editor.session.setMode(`ace/mode/${detectedLanguage}`);
                document.getElementById('storedData').textContent = fileContent;
                document.getElementById('status').textContent = 'File fetched successfully';
            } catch (error) {
                console.error('Error fetching file:', error);
                alert('Failed to fetch file from GitHub.');
                document.getElementById('status').textContent = 'Failed to fetch file from GitHub';
            }
        });
        document.getElementById('commit').addEventListener('click', async () => {
            const { githubToken, repoOwner, repoName, filePath, branch } = getGithubConfig();
            try {
                const getShaResponse = await axios.get(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`, {
                    headers: { Authorization: `token ${githubToken}` }
                });
                const sha = getShaResponse.data.sha;
                const content = editor.getValue();
                const encodedContent = btoa(unescape(encodeURIComponent(content)));
                const response = await axios.put(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`, {
                    message: 'Commit from Ace editor',
                    content: encodedContent,
                    sha: sha,
                    branch: branch
                }, {
                    headers: { Authorization: `token ${githubToken}` }
                });
                alert('File committed to GitHub.');
                document.getElementById('storedData').textContent = content;
                document.getElementById('status').textContent = 'File committed successfully';
            } catch (error) {
                console.error('Error committing file:', error);
                alert('Failed to commit file to GitHub.');
                document.getElementById('status').textContent = 'Failed to commit file to GitHub';
            }
        });
        function allowDrop(event) {
            event.preventDefault();
        }
        function getModeForFileExtension(extension) {
            const modes = {
                'js': 'javascript',
                'json': 'json',
                'html': 'html',
                'css': 'css',
                'java': 'java',
                'py': 'python',
                'xml': 'xml',
                'md': 'markdown'
            };
            return modes[extension] || 'text';
        }
        function autoDetectLanguage(content) {
            const keywords = {
                'html': /<!DOCTYPE html>|<html\b|<head\b|<body\b|<\/body>|<\/html>|<div\b|<span\b|<button\b|<form\b|<input\b|<img\b|<a\b|<ul\b|<li\b|<table\b|<tr\b|<td\b|<\/div>|<\/span>|<\/button>|<\/form>|<\/input>|<\/img>|<\/a>|<\/ul>|<\/li>|<\/table>|<\/tr>|<\/td>/i,
                'python': /\b(def|import|from|as|if|else|elif|for|while|return|print|class|with|try|except|lambda)\b/g,
                'javascript': /\b(function|var|let|const|if|else|return|for|while|console\.log|=>|import|export|class|new)\b/g,
                'java': /\b(class|public|private|protected|void|static|int|new|if|else|while|for|return|import|package|throws|extends|implements)\b/g,
                'css': /\b(color|background|font-size|margin|padding|border|display|flex|grid|align|justify|position|float|clear)\b/g,
                'json': /^\s*(\{|\[)|\b(true|false|null)\b/g,
                'xml': /^\s*<\?xml\b|\<\/?\w+\b/g,
                'markdown': /^(#|\*|-|\d+\.)\s|\[(.*?)\]\((.*?)\)|`{1,3}/g,
                'sql': /\b(SELECT|INSERT|UPDATE|DELETE|FROM|WHERE|JOIN|INNER|LEFT|RIGHT|FULL|CREATE|DROP|ALTER|TABLE|DATABASE|INDEX|VIEW)\b/g,
                'bash': /(^#!\/bin\/bash\b|^#!\/bin\/sh\b)|\b(echo|export|if|then|else|fi|for|in|do|done|while|case|esac|function)\b/g,
                'ruby': /\b(def|class|module|if|else|elsif|end|do|while|for|require|include|begin|rescue)\b/g,
                'php': /\b(<\?php|\$[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*|\becho\b|if|else|elseif|while|for|foreach|function|return|require|include)\b/g,
                'csharp': /\b(class|public|private|protected|void|static|int|if|else|while|for|return|namespace|using|new|try|catch|finally|throw|async|await)\b/g,
                'go': /\b(func|package|import|var|const|if|else|for|return|struct|interface|go|defer|select|case)\b/g,
                'kotlin': /\b(fun|val|var|if|else|for|while|when|return|class|object|interface|import|package)\b/g,
                'r': /\b(function|if|else|for|while|repeat|break|next|return|library|source|<-|TRUE|FALSE)\b/g
            };
        
            const matchCounts = {};
            const lines = content.split('\n');
            const maxLines = 100; // Adjust this to cover more or fewer lines
        
            // Check up to maxLines for more weight at the beginning
            for (let i = 0; i < Math.min(lines.length, maxLines); i++) {
                const line = lines[i];
                for (const [language, regex] of Object.entries(keywords)) {
                    const matches = line.match(regex);
                    if (matches) {
                        if (!matchCounts[language]) {
                            matchCounts[language] = 0;
                        }
                        matchCounts[language] += matches.length * (maxLines - i); // More weight for earlier lines
                    }
                }
            }
        
            // Check the rest of the content with less weight
            for (let i = maxLines; i < lines.length; i++) {
                const line = lines[i];
                for (const [language, regex] of Object.entries(keywords)) {
                    const matches = line.match(regex);
                    if (matches) {
                        if (!matchCounts[language]) {
                            matchCounts[language] = 0;
                        }
                        matchCounts[language] += matches.length; // No extra weight for later lines
                    }
                }
            }
        
            let detectedLanguage = 'text';
            let maxMatches = 0;
        
            for (const [language, count] of Object.entries(matchCounts)) {
                if (count > maxMatches) {
                    maxMatches = count;
                    detectedLanguage = language;
                }
            }
        
            // If CSS, JavaScript, or XML is detected, check again if it might be HTML
            if (['css', 'javascript', 'xml'].includes(detectedLanguage)) {
                if (keywords.html.test(content)) {
                    detectedLanguage = 'html';
                }
            }
        
            console.log("detected language: " + detectedLanguage);
            return detectedLanguage;
        }
        function handleDrop(event) {
            event.preventDefault();
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                const reader = new FileReader();
                const fileExtension = file.name.split('.').pop().toLowerCase();
                reader.onload = function(e) {
                    const cursorPos = editor.getCursorPosition();
                    const fileContent = e.target.result;
                    const detectedLanguage = autoDetectLanguage(fileContent);
                    editor.session.setMode(`ace/mode/${detectedLanguage}`);
                    editor.session.insert(cursorPos, fileContent);
                };
                if (file.type.startsWith("text/")) {
                    reader.readAsText(file);
                } else if (file.type === "image/png") {
                    reader.onload = function(e) {
                        const cursorPos = editor.getCursorPosition();
                        const base64String = e.target.result;
                        const imageTag = `![Image](${base64String})`;
                        editor.session.insert(cursorPos, imageTag);
                    };
                    reader.readAsDataURL(file);
                } else {
                    reader.readAsText(file);
                }
            }
        }
        let detectTimeout;
        editor.session.on('change', () => {
            clearTimeout(detectTimeout);
            detectTimeout = setTimeout(() => {
                const content = editor.getValue();
                const detectedLanguage = autoDetectLanguage(content);
                editor.session.setMode(`ace/mode/${detectedLanguage}`);
            }, 500);
        });
		let isDarkTheme = true;
		function applyTheme() {
            const bodyStyles = document.body.style;
            const editorStyles = document.getElementById('editor').style;
            const svgPaths = document.querySelectorAll('svg path');
            const svgTexts = document.querySelectorAll('svg text');
            if (isDarkTheme) {
                document.getElementById('themeTag').textContent = "dark";
                bodyStyles.backgroundColor = '#272822';
                bodyStyles.color = '#ddd';
                editor.setTheme("ace/theme/monokai");
                document.querySelectorAll('input[type="text"]').forEach(input => {
                    input.style.backgroundColor = '#D3D3D3';
                    input.style.color = '#272822';
                    input.style.border = '1px solid #D3D3D3';
                });
                document.querySelectorAll('#topmenu button').forEach(button => {
                    button.style.backgroundColor = '#444';
                    button.style.color = '#DDD';
                    button.style.border = '1px solid #444';
                });
                // Update SVG color for dark theme
                svgPaths.forEach(path => {
                    path.setAttribute('fill', '#FFF');
                });
                svgTexts.forEach(text => {
                    text.setAttribute('fill', '#FFF');
                });
                // Apply dark scrollbar styles
                document.documentElement.style.setProperty('--scrollbar-bg', '#444');
                document.documentElement.style.setProperty('--scrollbar-thumb', '#666');
            } else {
                document.getElementById('themeTag').textContent = "light";
                bodyStyles.backgroundColor = '#DDD';
                bodyStyles.color = '#272822';
                editor.setTheme("ace/theme/chrome");
                document.querySelectorAll('input[type="text"]').forEach(input => {
                    input.style.backgroundColor = '#FFFFFF';
                    input.style.color = '#000000';
                    input.style.border = '1px solid #CCC';
                });
                document.querySelectorAll('#topmenu button').forEach(button => {
                    button.style.backgroundColor = '#FFF';
                    button.style.color = '#000';
                    button.style.border = '1px solid #CCC';
                });
                // Update SVG color for light theme
                svgPaths.forEach(path => {
                    path.setAttribute('fill', '#000');
                });
                svgTexts.forEach(text => {
                    text.setAttribute('fill', '#000');
                });
                // Revert to light scrollbar styles
                document.documentElement.style.setProperty('--scrollbar-bg', '#FFF');
                document.documentElement.style.setProperty('--scrollbar-thumb', '#CCC');
            }
        }
		document.getElementById('toggleTheme').addEventListener('click', () => {
			isDarkTheme = !isDarkTheme;
			applyTheme();
		});
		
		function saveAs() {
			// Get the content from the editor
			const content = editor.getValue();
			// Update the storedData element with the editor content
			document.getElementById('storedData').textContent = content;
			// Create a blob with the content
			const blob = new Blob([content], { type: 'text/plain' });
			// Create a link element
			const link = document.createElement('a');
			// Set the download attribute with a filename
			link.download = defaultExportName;
			// Create an object URL for the blob
			link.href = URL.createObjectURL(blob);
			// Append the link to the body (required for Firefox)
			document.body.appendChild(link);
			// Programmatically click the link to trigger the download
			link.click();
			// Remove the link from the document
			document.body.removeChild(link);
		}
		
		document.getElementById('saveAs').addEventListener('click', () => {
			saveAs();
		});
		
		function newFile() {
			editor.setValue("");
			// Get all elements within the head tag
			const headElements = document.head.children;
			// Iterate over the elements
			for (let i = 0; i < headElements.length; i++) {
				// Check if the current element is not a <style> tag
				if (headElements[i].tagName !== 'STYLE') {
					break; // Exit the loop once we encounter a non-<style> tag
				}
				// Remove the <style> tag
				headElements[i].parentNode.removeChild(headElements[i]);
				// Since we are modifying the DOM, decrement the index to account for the removed element
				i--;
			}
            const editorElement = document.getElementById('editor');
            const originalContent = editorElement.innerHTML;
            editorElement.innerHTML = '';
            const content = document.documentElement.outerHTML;
			SHTS.new(content);
		}
		
	    document.getElementById('newFile').addEventListener('click', () => {
	        saveFile();
	        newFile();
		});
		
		function saveFile() {
			document.getElementById('storedData').textContent = editor.getValue();
			// Get all elements within the head tag
			const headElements = document.head.children;
			// Iterate over the elements
			for (let i = 0; i < headElements.length; i++) {
				// Check if the current element is not a <style> tag
				if (headElements[i].tagName !== 'STYLE') {
					break; // Exit the loop once we encounter a non-<style> tag
				}
				// Remove the <style> tag
				headElements[i].parentNode.removeChild(headElements[i]);
				// Since we are modifying the DOM, decrement the index to account for the removed element
				i--;
			}
            const editorElement = document.getElementById('editor');
            const originalContent = editorElement.innerHTML;
            editorElement.innerHTML = '';
            const content = document.documentElement.outerHTML;
            SHTS.save(content);
		}
		
	    document.getElementById('saveFile').addEventListener('click', () => {
			saveFile();
		});
		
		window.onload = () => {		
			console.log("get theme");
            const themeTag = document.getElementById('themeTag').textContent;
            if (themeTag === "dark") {
                isDarkTheme = true;
            } else {
                isDarkTheme = false; // Default to light theme
            }
            
			console.log("apply theme");
			applyTheme();
			
			console.log("loading");
			let fileContent = document.getElementById('storedData').textContent;
			fileContent = fileContent.replace(/[\r\n]+/g, '\n');
			editor.setValue(fileContent);
                
            const detectedLanguage = autoDetectLanguage(fileContent);
            editor.session.setMode(`ace/mode/${detectedLanguage}`);
            
            // clear status
            document.getElementById('status').textContent = "";
        };
        
        window.addEventListener("beforeunload", (event) => {
			document.getElementById('storedData').textContent = editor.getValue();
			// Get all elements within the head tag
			const headElements = document.head.children;
			// Iterate over the elements
			for (let i = 0; i < headElements.length; i++) {
				// Check if the current element is not a <style> tag
				if (headElements[i].tagName !== 'STYLE') {
					break; // Exit the loop once we encounter a non-<style> tag
				}
				// Remove the <style> tag
				headElements[i].parentNode.removeChild(headElements[i]);
				// Since we are modifying the DOM, decrement the index to account for the removed element
				i--;
			}
            const editorElement = document.getElementById('editor');
            const originalContent = editorElement.innerHTML;
            editorElement.innerHTML = '';
            const content = document.documentElement.outerHTML;
            SHTS.save(content);
        });
    </script>
</body></html>